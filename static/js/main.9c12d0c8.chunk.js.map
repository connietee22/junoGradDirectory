{"version":3,"sources":["firebase.js","components/Form.js","components/StudentDisplay.js","components/DropDownCohort.js","components/AlphaButton.js","App.js","serviceWorker.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","Form","props","id","className","htmlFor","aria-label","type","name","onChange","handleChange","value","firstName","placeholder","validator","message","lastName","cohort","website","pattern","title","github","linkedIn","maxLength","funFact","onClick","handleSubmit","StudentDisplay","href","aria-hidden","DropDownCohort","selectedDropDown","handleCohortSubmit","AlphaButton","handleAlphaSubmit","isAlpha","App","event","target","setState","state","preventDefault","allValid","alert","database","ref","push","formComplete","isToggled","document","getElementById","reset","showMessages","setCardState","filteredCards","studentCards","filter","student","alphaSortedCards","sort","alphabetizeStudents","toggleForm","a","b","nameA","toUpperCase","nameB","comparison","SimpleReactValidator","autoForceUpdate","messages","required","alpha_num","alpha_num_dash","on","response","newState","data","val","key","displayCards","this","handleCohortSelect","map","index","showUnder","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.9c12d0c8.chunk.js","sourcesContent":["import firebase from 'firebase/app';\n// importing the database\nimport 'firebase/database';\n\n// Initializing firebase\n// juno grad directory app's Firebase configuration\nconst firebaseConfig = {\n\tapiKey: 'AIzaSyC4lf_4rgciba2OfkcI2Bzz6aW4SykgYpA',\n\tauthDomain: 'juno-grad-directory.firebaseapp.com',\n\tdatabaseURL: 'https://juno-grad-directory.firebaseio.com',\n\tprojectId: 'juno-grad-directory',\n\tstorageBucket: 'juno-grad-directory.appspot.com',\n\tmessagingSenderId: '153843151209',\n\tappId: '1:153843151209:web:885a162587856509cc0df8',\n};\n\nfirebase.initializeApp(firebaseConfig);\n\nexport default firebase;\n","import React from 'react';\n\n// Form to collect student user information\nconst Form = (props) => {\n\treturn (\n\t\t<>\n\t\t\t<form id='mainForm' className='userForm'>\n\t\t\t\t{/****INPUT - FIRST NAME */}\n\t\t\t\t<label htmlFor='firstName' aria-label='enter first name'></label>\n\t\t\t\t<input\n\t\t\t\t\ttype='text'\n\t\t\t\t\tid='firstName'\n\t\t\t\t\tname='firstName'\n\t\t\t\t\t// function will trigger on change of this element\n\t\t\t\t\tonChange={props.handleChange}\n\t\t\t\t\t// this will always track the changes of the value\n\t\t\t\t\tvalue={props.firstName}\n\t\t\t\t\tplaceholder='first name'\n\t\t\t\t></input>\n\t\t\t\t{/* \"required\" message will appear if first name missing */}\n\t\t\t\t{props.validator.message('firstName', props.firstName, 'required|max: 20')}\n\n\t\t\t\t{/****INPUT - LAST NAME */}\n\t\t\t\t<label htmlFor='lastName' aria-label='enter last name'></label>\n\t\t\t\t<input\n\t\t\t\t\ttype='text'\n\t\t\t\t\tid='lastName'\n\t\t\t\t\tname='lastName'\n\t\t\t\t\tonChange={props.handleChange}\n\t\t\t\t\tvalue={props.lastName}\n\t\t\t\t\tplaceholder='last name'\n\t\t\t\t></input>\n\t\t\t\t{/* \"required\" message will appear if last name missing */}\n\t\t\t\t{props.validator.message('lastName', props.lastName, 'required|max: 20')}\n\n\t\t\t\t{/****INPUT - COHORT FIELD */}\n\t\t\t\t<label htmlFor='cohort' aria-label='enter cohort number'></label>\n\t\t\t\t<input\n\t\t\t\t\ttype='number'\n\t\t\t\t\tid='cohort'\n\t\t\t\t\tname='cohort'\n\t\t\t\t\tclassName='standAloneInput'\n\t\t\t\t\tonChange={props.handleChange}\n\t\t\t\t\tvalue={props.cohort}\n\t\t\t\t></input>\n\t\t\t\t{/* message will appear if number missing or is not between 1 and 29 */}\n\t\t\t\t{props.validator.message('cohort', props.cohort, 'required|numeric|min:1,num|max:30,num')}\n\n\t\t\t\t{/****INPUT - WEBSITE FIELD */}\n\t\t\t\t<label htmlFor='website' aria-label='enter website address'></label>\n\t\t\t\t<input\n\t\t\t\t\ttype='url'\n\t\t\t\t\tid='website'\n\t\t\t\t\tname='website'\n\t\t\t\t\tclassName='standAloneInput'\n\t\t\t\t\tplaceholder='website'\n\t\t\t\t\tonChange={props.handleChange}\n\t\t\t\t\tvalue={props.website}\n\t\t\t\t\tpattern='https?://.+'\n\t\t\t\t\ttitle='Include http://'\n\t\t\t\t></input>\n\t\t\t\t{/* message will appear if missing or not an url abiding to the stated pattern */}\n\t\t\t\t{props.validator.message('website', props.website, 'required|url')}\n\n\t\t\t\t{/****INPUT - GITHUB FIELD */}\n\t\t\t\t<label htmlFor='github' aria-label='enter github username'></label>\n\t\t\t\t<input\n\t\t\t\t\ttype='text'\n\t\t\t\t\tid='github'\n\t\t\t\t\tname='github'\n\t\t\t\t\tonChange={props.handleChange}\n\t\t\t\t\tvalue={props.github}\n\t\t\t\t\tplaceholder='github username'\n\t\t\t\t></input>\n\t\t\t\t{/* message will appear if missing or does not adhere to github's alpha-numeric-dash requirement for usernames */}\n\t\t\t\t{props.validator.message('github', props.github, 'required|alpha_num_dash')}\n\n\t\t\t\t{/**** INPUT - LINKEDIN */}\n\t\t\t\t<label htmlFor='linkedIn' aria-label='enter linkedin username'></label>\n\t\t\t\t<input\n\t\t\t\t\ttype='text'\n\t\t\t\t\tid='linkedIn'\n\t\t\t\t\tname='linkedIn'\n\t\t\t\t\tonChange={props.handleChange}\n\t\t\t\t\tvalue={props.linkedIn}\n\t\t\t\t\tplaceholder='linkedIn username'\n\t\t\t\t></input>\n\t\t\t\t{/* message will appear if missing or does not adhere to linkedin's alpha-numeric requirement for usernames */}\n\t\t\t\t{props.validator.message('linkedIn', props.linkedIn, 'required|alpha_num')}\n\n\t\t\t\t{/**** INPUT - FUN FACT */}\n\t\t\t\t<label htmlFor='funFact' aria-label='enter one fun fact about yourself!'></label>\n\t\t\t\t<textarea\n\t\t\t\t\tmaxLength='100'\n\t\t\t\t\tid='funFact'\n\t\t\t\t\tname='funFact'\n\t\t\t\t\tclassName='standAloneInput'\n\t\t\t\t\tonChange={props.handleChange}\n\t\t\t\t\tvalue={props.funFact}\n\t\t\t\t\tplaceholder='Most importantly: one fun fact about yourself!'\n\t\t\t\t></textarea>\n\t\t\t\t{/* message will appear if missing */}\n\t\t\t\t{props.validator.message('funFact', props.funFact, 'required')}\n\n\t\t\t\t{/**** TO SUBMIT FORM */}\n\t\t\t\t<button onClick={props.handleSubmit}>Submit</button>\n\t\t\t</form>\n\t\t</>\n\t);\n};\n\nexport default Form;\n","import React from 'react';\n\n//*****TO DISPLAY INDIVIDUAL STUDENT CARDS */\nconst StudentDisplay = (props) => {\n\treturn (\n\t\t<>\n\t\t\t<div>\n\t\t\t\t<span className='studentName boldLabel'>\n\t\t\t\t\t{props.firstName} {props.lastName}\n\t\t\t\t</span>\n\t\t\t\t<p className='boldLabel'>cohort {props.cohort}</p>\n\n\t\t\t\t<p>\n\t\t\t\t\t<a href={props.website}>\n\t\t\t\t\t\t<i className='fas fa-desktop' aria-hidden='true'></i>\n\t\t\t\t\t\tportfolio\n\t\t\t\t\t</a>\n\t\t\t\t</p>\n\n\t\t\t\t<p>\n\t\t\t\t\t<a href={`https://github.com/${props.github}`}>\n\t\t\t\t\t\t<i className='fab fa-github-square' aria-hidden='true'></i>\n\t\t\t\t\t\t{props.github}\n\t\t\t\t\t</a>\n\t\t\t\t</p>\n\t\t\t\t<p>\n\t\t\t\t\t<a href={`https://www.linkedin.com/in/${props.linkedIn}`}>\n\t\t\t\t\t\t<i className='fab fa-linkedin' aria-hidden='true'></i>\n\t\t\t\t\t\t{props.linkedIn}\n\t\t\t\t\t</a>\n\t\t\t\t</p>\n\t\t\t\t<p>\n\t\t\t\t\t<span className='boldLabel'>Fun fact: </span>\n\t\t\t\t\t{props.funFact}\n\t\t\t\t</p>\n\t\t\t</div>\n\t\t</>\n\t);\n};\n\nexport default StudentDisplay;\n","import React from 'react';\n\n/******DROP-DOWN MENU TO SORT CARDS */\n\nconst DropDownCohort = (props) => {\n\n\t\treturn (\n\t\t\t<form className='filterContainer'>\n\t\t\t\t<label\n\t\t\t\t\thtmlFor='filterCohort'\n\t\t\t\t\taria-label='select drop-down option to filter student cards by cohort number'\n\t\t\t\t></label>\n\t\t\t\t<select\n\t\t\t\t\tid='filterCohort'\n\t\t\t\t\tvalue={props.selectedDropDown}\n\t\t\t\t\tonChange={props.handleCohortSubmit}\n\t\t\t\t>\n\t\t\t\t\t<option value='reset'>Filter by Cohort</option>\n\t\t\t\t\t<option value='reset'>ALL COHORTS</option>\n\t\t\t\t\t<option value='1'>1</option>\n\t\t\t\t\t<option value='2'>2</option>\n\t\t\t\t\t<option value='3'>3</option>\n\t\t\t\t\t<option value='4'>4</option>\n\t\t\t\t\t<option value='5'>5</option>\n\t\t\t\t\t<option value='6'>6</option>\n\t\t\t\t\t<option value='7'>7</option>\n\t\t\t\t\t<option value='8'>8</option>\n\t\t\t\t\t<option value='9'>9</option>\n\t\t\t\t\t<option value='10'>10</option>\n\t\t\t\t\t<option value='11'>11</option>\n\t\t\t\t\t<option value='12'>12</option>\n\t\t\t\t\t<option value='13'>13</option>\n\t\t\t\t\t<option value='14'>14</option>\n\t\t\t\t\t<option value='15'>15</option>\n\t\t\t\t\t<option value='16'>16</option>\n\t\t\t\t\t<option value='17'>17</option>\n\t\t\t\t\t<option value='18'>18</option>\n\t\t\t\t\t<option value='19'>19</option>\n\t\t\t\t\t<option value='20'>20</option>\n\t\t\t\t\t<option value='21'>21</option>\n\t\t\t\t\t<option value='22'>22</option>\n\t\t\t\t\t<option value='23'>23</option>\n\t\t\t\t\t<option value='24'>24</option>\n\t\t\t\t\t<option value='25'>25</option>\n\t\t\t\t\t<option value='26'>26</option>\n\t\t\t\t\t<option value='27'>27</option>\n\t\t\t\t\t<option value='28'>28</option>\n\t\t\t\t\t<option value='29'>29</option>\n\t\t\t\t\t<option value='30'>30</option>\n\t\t\t\t</select>\n\t\t\t</form>\n\t\t);\n\t}\n\n\nexport default DropDownCohort;","import React from 'react';\n\n/******BUTTON TO ALPHABETIZE CARDS*****/\nconst AlphaButton = (props) => {\n\n\treturn (\n\t\t<div className=\"alphaContainer\">\n\t\t\t{/* Depending on the toggle stage of alpha button, will change the text and classname */}\n\t\t\t<button onClick={props.handleAlphaSubmit} className={props.isAlpha ? 'alphaClicked' : 'alphaLabel'}>{props.isAlpha ? 'Sort by date added >>' : 'Sort by alphabet >>'}</button>\n\t\t</div>\n\t)\n};\n\nexport default AlphaButton;","import React, { Component } from 'react';\nimport firebase from './firebase';\n// external libraries\nimport SimpleReactValidator from 'simple-react-validator';\nimport ScrollToTop from 'react-scroll-up';\n// components\nimport Form from './components/Form';\nimport StudentDisplay from './components/StudentDisplay';\nimport DropDownCohort from './components/DropDownCohort';\nimport AlphaButton from './components/AlphaButton';\n// stylesheet\nimport './App.css';\n\nclass App extends Component {\n\t//************CREATING STATE DATA*********************/\n\tconstructor() {\n\t\tsuper();\n\t\tthis.state = {\n\t\t\tstudentCards: [],\n\t\t\tfilteredCards: [],\n\t\t\talphaSortedCards: [],\n\t\t\tfirstName: '', // user inputs\n\t\t\tlastName: '',\n\t\t\tcohort: 0,\n\t\t\twebsite: '',\n\t\t\tgithub: '',\n\t\t\tlinkedIn: '',\n\t\t\tfunFact: '',\n\t\t\tselectedDropDown: 'reset', // for cohort dropdown menu\n\t\t\tisToggled: false, // to toggle form on and off screen\n\t\t\tisAlpha: false, // to toggle alphabetize button\n\t\t\tformComplete: false,\n\t\t};\n\t\t// form validator messages if there are errors on particlar inputs\n\t\tthis.validator = new SimpleReactValidator({\n\t\t\tautoForceUpdate: this,\n\t\t\tmessages: {\n\t\t\t\trequired: \"Aw! Don't leave this field empty!\",\n\t\t\t\talpha_num: 'You sure you typed that right?',\n\t\t\t\talpha_num_dash: \"This doesn't look like a Github name\",\n\t\t\t},\n\t\t});\n\t}\n\n\t//***********UPDATING STATE*************************//\n\tcomponentDidMount() {\n\t\t// call on firebase's database\n\t\tconst dbRef = firebase.database().ref();\n\n\t\t// on any change of the database, push the data into a state array\n\t\tdbRef.on('value', (response) => {\n\t\t\t// creating new array to hold the data\n\t\t\tconst newState = [];\n\t\t\t// creating a variable for the array of objects (student form responses)\n\t\t\tconst data = response.val();\n\n\t\t\t// on firebase change, push data into newState array\n\t\t\tfor (const key in data) {\n\t\t\t\tnewState.push({\n\t\t\t\t\tkey: key,\n\t\t\t\t\tfirstName: data[key].firstName,\n\t\t\t\t\tlastName: data[key].lastName,\n\t\t\t\t\tcohort: data[key].cohort,\n\t\t\t\t\twebsite: data[key].website,\n\t\t\t\t\tgithub: data[key].github,\n\t\t\t\t\tlinkedIn: data[key].linkedIn,\n\t\t\t\t\tfunFact: data[key].funFact,\n\t\t\t\t});\n\t\t\t}\n\n\t\t\t// setting the new array of data from firebase into our original state array, which we can manipulate for display\n\t\t\t// set alphaSortedCards is also added here at start, just in case user clicks on the alpha button before the cohort\n\t\t\tthis.setState({\n\t\t\t\tstudentCards: newState,\n\t\t\t\tfilteredCards: newState,\n\t\t\t\talphaSortedCards: [...newState].sort(this.alphabetizeStudents),\n\t\t\t});\n\t\t});\n\t}\n\n\t//********EVENT HANDLER FUNCTION TO UPDATE FORM.JS MULTIPLE INPUTS' STATE VALUES *****************************//\n\thandleChange = (event) => {\n\t\tconst value = event.target.value;\n\t\tthis.setState({\n\t\t\t// goes through all the form states and sets the values -- shortcut with help from https://www.pluralsight.com\n\t\t\t...this.state,\n\t\t\t[event.target.name]: value,\n\t\t});\n\t};\n\n\t//**********EVENT LISTENER FOR FORM SUBMIT -- compiles all info on form submit and pushes to firebase*********/\n\thandleSubmit = (event) => {\n\t\tevent.preventDefault();\n\n\t\tif (this.validator.allValid()) {\n\t\t\talert('Sweet! Welcome to the directory!');\n\t\t\t// open portal to Firebase\n\t\t\tconst dbRef = firebase.database().ref();\n\n\t\t\t// gather values from all the inputs into an object and\n\t\t\t// push new student object to Firebase\n\t\t\tdbRef.push({\n\t\t\t\tfirstName: this.state.firstName,\n\t\t\t\tlastName: this.state.lastName,\n\t\t\t\tcohort: this.state.cohort,\n\t\t\t\twebsite: this.state.website,\n\t\t\t\tgithub: this.state.github,\n\t\t\t\tlinkedIn: this.state.linkedIn,\n\t\t\t\tfunFact: this.state.funFact,\n\t\t\t});\n\n\t\t\t// resets the form\n\t\t\tthis.setState({\n\t\t\t\tfirstName: '',\n\t\t\t\tlastName: '',\n\t\t\t\tcohort: 0,\n\t\t\t\twebsite: '',\n\t\t\t\tgithub: '',\n\t\t\t\tlinkedIn: '',\n\t\t\t\tfunFact: '',\n\t\t\t\tformComplete: '',\n\t\t\t\tisToggled: '',\n\t\t\t\tselectedDropDown: '',\n\t\t\t});\n\t\t\tdocument.getElementById('mainForm').reset();\n\t\t} else {\n\t\t\t// show validator npm messages\n\t\t\tthis.validator.showMessages();\n\t\t}\n\t};\n\n\t//***********EVENT HANDLER FOR COHORT NUMBER SUBMIT******* */\n\thandleCohortSubmit = (event) => {\n\t\tevent.preventDefault();\n\n\t\t// grab the state of the dropdown option selected\n\t\tthis.setState(\n\t\t\t{\n\t\t\t\tselectedDropDown: event.target.value,\n\t\t\t},\n\t\t\t// once the state is set, then do a callback funtion to setCardState function below (code courtesy Chris Harris, developer)\n\t\t\t() => {\n\t\t\t\tthis.setCardState();\n\t\t\t}\n\t\t);\n\t};\n\n\t// to set the filteredCard set and alphabetically sorted cards set for render\n\tsetCardState = () => {\n\t\t// copy of the returned array from firebase\n\t\tconst copyOfStudentCards = [...this.state.studentCards];\n\t\t// creating a filteredCards array to manipulate and display\n\t\tconst filteredCards = copyOfStudentCards.filter((student) => {\n\t\t\tif (this.state.selectedDropDown === 'reset') {\n\t\t\t\treturn true; // if no cohort is chosen from the drop-down menu, return all the students\n\t\t\t} else if (student.cohort === this.state.selectedDropDown) {\n\t\t\t\treturn true; // if student cohort property matches the current dropdown, then return everything in this filter\n\t\t\t} else {\n\t\t\t\treturn false; // if any other possible mistake, return false\n\t\t\t}\n\t\t});\n\t\t// take a copy of the filteredCards array and sort alphabetically\n\t\tconst alphaSortedCards = [...filteredCards].sort(this.alphabetizeStudents);\n\t\t// set the filteredCards and alphaSortedCards array based on what was returned by the filter conditionals above\n\t\tthis.setState({\n\t\t\tfilteredCards,\n\t\t\talphaSortedCards,\n\t\t});\n\t};\n\n\t//***********EVENT HANDLER ON ALPHABETIZE BUTTON TO ALPHABETIZE ARRAY */\n\thandleAlphaSubmit = (event) => {\n\t\t//changes the alpha button's boolean state -- a trigger to determine if something should be alphabetized\n\t\tthis.setState({\n\t\t\tisAlpha: !this.state.isAlpha,\n\t\t});\n\t};\n\n\t//*********EVENT HANDLER ON BUTTON TO SHOW FORM***********/\n\ttoggleForm = () => {\n\t\tthis.setState({\n\t\t\tisToggled: !this.state.isToggled,\n\t\t\tformComplete: false,\n\t\t});\n\t};\n\n\t//****** COMPARE FUNCTION USED TO SORT ARRAY ALPHABETICALLY****/\n\talphabetizeStudents = (a, b) => {\n\t\t// Using toUpperCase() to ignore character casing, just in case it was entered\n\t\tconst nameA = a.firstName.toUpperCase();\n\t\tconst nameB = b.firstName.toUpperCase();\n\n\t\t// set comparison number -- this code from sitepoint.com and multiple stackoverflow sources\n\t\tlet comparison = 0;\n\t\tif (nameA > nameB) {\n\t\t\tcomparison = 1;\n\t\t} else if (nameA < nameB) {\n\t\t\tcomparison = -1;\n\t\t}\n\t\treturn comparison;\n\t};\n\n\t//**********RENDERING THE PAGE**********************/\n\trender() {\n\t\t//to prepare the correct cards to display, saving the filtered cards in a variable\n\t\tlet displayCards = this.state.filteredCards;\n\t\t// if the Alphabetize button is triggered, then the cards to display will be the alphabetized set\n\t\tif (this.state.isAlpha === true) {\n\t\t\tdisplayCards = this.state.alphaSortedCards;\n\t\t}\n\t\t// ****** RETURN *******\n\t\treturn (\n\t\t\t<div className='App'>\n\t\t\t\t<header className='wrapper'>\n\t\t\t\t\t<div className='headerContainer'>\n\t\t\t\t\t\t<h1>\n\t\t\t\t\t\t\t<span className='junoType'>Juno College</span>Grad Directory\n\t\t\t\t\t\t</h1>\n\t\t\t\t\t\t<h2><i className='fas fa-terminal'></i>A collection of front-end development bootcamp survivors</h2>\n\t\t\t\t\t\t<div className='headerButtons'>\n\t\t\t\t\t\t\t{/* This will trigger the form to open */}\n\t\t\t\t\t\t\t<button onClick={this.toggleForm}>Add me!</button>\n\t\t\t\t\t\t\t<a href='#main'>\n\t\t\t\t\t\t\t\t<button>Just browsin'</button>\n\t\t\t\t\t\t\t</a>\t\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</header>\n\t\t\t\t{/********FORM SECTION - TO INPUT STUDENT CARDS ***************/}\n\t\t\t\t<section className='wrapper'>\n\t\t\t\t\t<div className='formToFill'>\n\t\t\t\t\t\t{/* to show the form only if the button is toggled and the form is not complete */}\n\t\t\t\t\t\t{this.state.isToggled && !this.state.formComplete && (\n\t\t\t\t\t\t\t<Form\n\t\t\t\t\t\t\t\t// form functions\n\t\t\t\t\t\t\t\thandleChange={this.handleChange}\n\t\t\t\t\t\t\t\t// handleImageAsFile={this.handleImageAsFile}\n\t\t\t\t\t\t\t\thandleSubmit={this.handleSubmit}\n\t\t\t\t\t\t\t\t// form validation\n\t\t\t\t\t\t\t\tvalidator={this.validator}\n\t\t\t\t\t\t\t\t//*****state data used as props in Form */\n\t\t\t\t\t\t\t\tlastName={this.state.lastName}\n\t\t\t\t\t\t\t\tfirstName={this.state.firstName}\n\t\t\t\t\t\t\t\tcohort={this.state.cohort}\n\t\t\t\t\t\t\t\twebsite={this.state.website}\n\t\t\t\t\t\t\t\tgithub={this.state.github}\n\t\t\t\t\t\t\t\tlinkedIn={this.state.linkedIn}\n\t\t\t\t\t\t\t\tfunFact={this.state.funFact}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t)}\n\t\t\t\t\t</div>\n\t\t\t\t</section>\n\n\t\t\t\t<main id='main'>\n\t\t\t\t\t<section className='wrapper'>\n\t\t\t\t\t\t{/* Displays cohort DropDown component  */}\n\t\t\t\t\t\t<DropDownCohort\n\t\t\t\t\t\t\thandleCohortSelect={this.handleCohortSelect}\n\t\t\t\t\t\t\thandleCohortSubmit={this.handleCohortSubmit}\n\t\t\t\t\t\t\tselectedDropDown={this.state.selectedDropDown}\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t{/* Displays alpha button component */}\n\t\t\t\t\t\t<AlphaButton handleAlphaSubmit={this.handleAlphaSubmit} isAlpha={this.state.isAlpha} />\n\n\t\t\t\t\t\t<section className='studentProfiles'>\n\t\t\t\t\t\t\t{/* render cards based on filter  */}\n\t\t\t\t\t\t\t<div className='cardsContainer'>\n\t\t\t\t\t\t\t\t{displayCards.map((student, index) => {\n\t\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t\t<StudentDisplay\n\t\t\t\t\t\t\t\t\t\t\tkey={index} // to differentiate each record in React\n\t\t\t\t\t\t\t\t\t\t\t// all the state data used as props in the StudentDisplay\n\t\t\t\t\t\t\t\t\t\t\tfirstName={student.firstName}\n\t\t\t\t\t\t\t\t\t\t\tlastName={student.lastName}\n\t\t\t\t\t\t\t\t\t\t\tcohort={student.cohort}\n\t\t\t\t\t\t\t\t\t\t\twebsite={student.website}\n\t\t\t\t\t\t\t\t\t\t\tgithub={student.github}\n\t\t\t\t\t\t\t\t\t\t\tlinkedIn={student.linkedIn}\n\t\t\t\t\t\t\t\t\t\t\tfunFact={student.funFact}\n\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t})}\n\t\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t\t{/* scroll to top button from npm package */}\n\t\t\t\t\t\t\t<ScrollToTop showUnder={160}>\n\t\t\t\t\t\t\t\t<span className='scroll'>▲</span>\n\t\t\t\t\t\t\t</ScrollToTop>\n\t\t\t\t\t\t</section>\n\t\t\t\t\t</section>\n\t\t\t\t</main>\n\t\t\t\t{/***************FOOTER************/}\n\t\t\t\t<footer className='wrapper'>\n\t\t\t\t\t<div className='footerFlex'>\n\t\t\t\t\t\t<p>\n\t\t\t\t\t\t\tCreated by <a href='http://connietsangcodes.com'>Connie Tsang</a> at{' '}\n\t\t\t\t\t\t\t<a href='http://junocollege.com'>Juno College</a>\n\t\t\t\t\t\t</p>\n\t\t\t\t\t\t<p>\n\t\t\t\t\t\t\timage by{' '}\n\t\t\t\t\t\t\t<a href='https://unsplash.com/@sibilant?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText'>\n\t\t\t\t\t\t\t\tJosephine Bredehoft\n\t\t\t\t\t\t\t</a>\n\t\t\t\t\t\t\t/\n\t\t\t\t\t\t\t<a href='https://unsplash.com/s/photos/cork-board?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText'>\n\t\t\t\t\t\t\t\tUnsplash\n\t\t\t\t\t\t\t</a>\n\t\t\t\t\t\t</p>\n\t\t\t\t\t</div>\n\t\t\t\t</footer>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}